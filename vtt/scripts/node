#!/usr/bin/env python
import rospy
from geometry_msgs.msg import Pose
import vtt.voice_recognition.voice_recognition as sr
import vtt.text_reasoning.text_reasoning as tr

class command_robot(object):
	def __init__(self):
		self.recognizer = sr.Recognizer()
		self.microphone = sr.Microphone()
		self.text_reasoning = tr.textreasoning()
		
		self.command_publisher = rospy.Publisher("/command", Pose)
		self.direction_publisher = rospy.Publisher("/direction", Pose)
		self.features = rospy.get_param('~features')
		print(self.features[1]['pose'])
		#next(item for item in self.features if item["name"] == "label1"){print(item)}

	def command(self):
		try:
			with self.microphone as source: self.recognizer.adjust_for_ambient_noise(source)
			#print("Set minimum energy threshold to {}".format(r.energy_threshold))
			while True:
				print("Waiting for command or query")
				with node.microphone as source: audio = node.recognizer.listen(source)
				print("Processing command or query")
				try:
				#recognize speech using Google Speech Recognition
					value = node.recognizer.recognize_google(audio)
					print(u"You said {}".format(value).encode("utf-8"))
					text = node.text_reasoning.voice_to_text(value)
					if text[0] == "direction":
						for feature in self.features:
							if feature['name'] == text[1]:
								goal = Pose()
								goal.position.x = feature['pose']['position']['x']
								goal.position.y = feature['pose']['position']['y']
								goal.position.z = feature['pose']['position']['z']
								goal.orientation.w = feature['pose']['orientation']['w']
								self.direction_publisher.publish(goal)
					elif text[0] == "command":
						for feature in self.features:
							if feature['name'] == text[1]:
								goal = Pose()
								goal.position.x = feature['pose']['position']['x']
								goal.position.y = feature['pose']['position']['y']
								goal.position.z = feature['pose']['position']['z']
								goal.orientation.w = feature['pose']['orientation']['w']
								self.command_publisher.publish(goal)
				except sr.UnknownValueError:
					print("Unable to process command or query")
				except sr.RequestError as e:
					print("Couldn't request results from Google Speech Recognition service; {0}".format(e))
		except KeyboardInterrupt:
			pass

if __name__ == '__main__':
	rospy.init_node("command_robot")
	node = command_robot()
	node.command()
	rospy.spin()
	
